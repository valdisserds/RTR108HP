<SCRIPT LANGUAGE="JavaScript">
var Result=0, Operator=0, Second=0, Ready=0, Done=1, Complete=0, Integer, CurrentValue;

function reset(value)
{	document.calculator.LED.value = value;
	Result = 0, Operator = 0, Second = 0, Ready = 0; Done = 1; Complete = 0;}

function SetValue(NewValue)
{	Integer = 1;
	if(Second || Done)
	{	Second = 0;
		Done = 0;
		CurrentValue = NewValue;}
	for(var i=0; i<CurrentValue.length; i++)
		if (CurrentValue[i]=='.')
			Integer=0;
}

function Click(Caption)
{
	CurrentValue = document.calculator.LED.value;
	if(Caption=='.')
	{	SetValue('0');
		if(Integer)
		{	CurrentValue += Caption;
			document.calculator.LED.value = CurrentValue;
			Complete = 0;}
	}

	if (Caption.length == 1 && Caption>='0' && Caption<='9')
	{	SetValue('');
		CurrentValue += Caption;
		document.calculator.LED.value = CurrentValue;
		Complete = 1;
	document.getElementById("res").innerHTML = "";	}

	if (Caption.length == 1 && Caption>='A' && Caption<='F')
	{	SetValue('');
		if(CurrentValue=='0')
			CurrentValue='';
		CurrentValue += Caption;
		document.calculator.LED.value = CurrentValue;
		Complete = 1;
		document.getElementById("res").innerHTML = "";}

	
	

	if(Caption=='plusminus')
		document.calculator.LED.value = eval(-CurrentValue);
	if(Caption=='=' && Complete && Operator!='0')
	{	if (Operator=='^')
		{Result = Math.pow(Result, CurrentValue); reset(Result);
		} else
			reset(eval(Result + Operator + CurrentValue));}

	if (Caption=='CL')
	{	reset(0);
                document.getElementById("res").innerHTML = "";
	if(document.calculator.LED.value[0] == '.')
		document.calculator.LED.value = '0' + document.calculator.LED.value;}

	if (Caption=='signedradio')
	{reset(0);  document.calculator.h2d.disabled = true;
	document.calculator.plusminus.disabled = false;
	if(document.calculator.LED.value[0] == '.')
		document.calculator.LED.value = '0' + document.calculator.LED.value;}

	if (Caption=='unsignedradio')
	{reset(0);	document.calculator.h2d.disabled = false;
	document.calculator.plusminus.disabled = true;
	if(document.calculator.LED.value[0] == '.')
		document.calculator.LED.value = '0' + document.calculator.LED.value;}


	if(Caption=='b2d' )
	{if (CurrentValue == "") {alert ("You must enter a binary integer number!");return false;}
	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1") {
			alert("The inserted number is not a valid signed binary number. \n All digits must be a binary 0 or a 1."); 
			return false;}
	}
	var i = 0; 
	var inputlength = CurrentValue.length;
	for(i = inputlength-1; i >= 1; i -= 1) 
	{ Result += eval(CurrentValue.charAt(i)) * Math.pow(2, inputlength-i-1);};//add all bits except sign
	if(document.calculator.binsign[1].checked == true)
           {Result = Result - eval(CurrentValue.charAt(0)) * Math.pow(2, inputlength-1);}
	else       {Result = Result + eval(CurrentValue.charAt(0)) * Math.pow(2, inputlength-1);};
  	  reset(Result);document.getElementById("res").innerHTML = "Decimal";}


	if(Caption=='2s')
	{if (CurrentValue == "") {alert ("You must enter a binary number!");return false;}
	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1") {
			alert("The inserted number is not a valid signed binary number. \n All digits must be a binary 0 or a 1."); 
			return false;}}
	var bin = CurrentValue.toString(2);
	var newbin; //used to hold the first zeros and first 1 from the left
	var i = 0; 
	var j = 0;
	var digit = 0;
	var temp = 0; 
	var inputlength = CurrentValue.length;
   	   for (i=(inputlength-1);i>=0;i--)
                {if (bin.charAt(i) != 0) {temp = 1};};

	if (temp == 0)
	    {Result = CurrentValue;}
        else    {   while (digit == 0) //counts the # of 0's until the first "1",starting with LSB
				{digit = bin.charAt((inputlength-1-i));	i++;};
			   newbin = bin.slice(inputlength-i);	//storage for the LSB's: 10...0					   
			   for (j=(inputlength-i-1);j>=0;j--)  //flips all other 1's and 0's
				{ if (bin.charAt(j) == "0")
					{newbin = "1" + newbin;}
				  else  {newbin = "0" + newbin;	}
				};    
			   bin =newbin; Result = newbin;}
		reset(Result);}




  	if(Caption=='h2b' )
	{CurrentValue = CurrentValue.toUpperCase();
		if (CurrentValue == "") {alert ("You must enter a signed hexadecimal integer number!");return false;}
	var i = 0;
	var k = 0;
	var decm = 0;  
	var inputlength = CurrentValue.length;
	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1" && CurrentValue.charAt(z) != "2" && CurrentValue.charAt(z) != "3" && CurrentValue.charAt(z) != "4" && CurrentValue.charAt(z) != "5" && CurrentValue.charAt(z) != "6" && CurrentValue.charAt(z) != "7" && CurrentValue.charAt(z) != "8" && CurrentValue.charAt(z) != "9" && CurrentValue.charAt(z) != "A" && CurrentValue.charAt(z) != "B" && CurrentValue.charAt(z) != "C" && CurrentValue.charAt(z) != "D" && CurrentValue.charAt(z) != "E" && CurrentValue.charAt(z) != "F") {
			alert("The inserted number is not a valid signed hexadecimal number.\n Use A-F capital letters and numbers."); 			return false;}
	}
	for(i = inputlength-1; i >= 0; i -= 1)
	{ switch(CurrentValue.charAt(i))
		{case "0": k = 0; break;
		case "1": k = 1;break;
		case "2": k = 2;break;
		case "3": k = 3;break;
		case "4": k = 4;break;
     		case "5": k = 5;break;
		case "6": k = 6;break;
		case "7": k = 7;break;
		case "8": k = 8;break;
  		case "9": k = 9;break;
		case "A": k = 10;break;
		case "B": k = 11;break;
		case "C": k = 12;break;
     		case "D": k = 13;break;
		case "E": k = 14;break;
		case "F": k = 15;break;
		default:  alert ("You must enter a signed hexadecimal integer number!");}
        decm += k * Math.pow(16, inputlength-i-1);};
	Result = decm.toString(2);reset(Result);document.getElementById("res").innerHTML = "Binary";}



	if(Caption=='b2h' )
	{if (CurrentValue == "") {alert ("You must enter a signed binary integer number!");return false;}

	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1") {
			alert("The inserted number is not a valid signed binary number. \n All digits must be a binary 0 or a 1.");return false;}
	}
	var i = 0;  
	var decm = 0; 
	var inputlength = CurrentValue.length;
	for(i = inputlength-1; i >= 0; i -= 1) 
	{ decm += eval(CurrentValue.charAt(i)) * Math.pow(2, inputlength-i-1);}
	//decm is the decimal value
	Result = decm.toString(16).toUpperCase();document.getElementById("res").innerHTML = "HEX";reset(Result);}


	if(Caption=='h2d' )
	{CurrentValue = CurrentValue.toUpperCase();
		///////check for no input
	if (CurrentValue == "") {alert ("You must enter an unsigned hexadecimal integer number!");return false;}
	var i = 0;
	var k = 0;  
	var inputlength = CurrentValue.length;
	/////check for a binary
	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1" && CurrentValue.charAt(z) != "2" && CurrentValue.charAt(z) != "3" && CurrentValue.charAt(z) != "4" && CurrentValue.charAt(z) != "5" && CurrentValue.charAt(z) != "6" && CurrentValue.charAt(z) != "7" && CurrentValue.charAt(z) != "8" && CurrentValue.charAt(z) != "9" && CurrentValue.charAt(z) != "A" && CurrentValue.charAt(z) != "B" && CurrentValue.charAt(z) != "C" && CurrentValue.charAt(z) != "D" && CurrentValue.charAt(z) != "E" && CurrentValue.charAt(z) != "F") {			alert("The inserted number is not a valid unsigned hexadecimal number.\n Use A-F capital letters and numbers."); return false;}
	}
	for(i = inputlength-1; i >= 0; i -= 1)
		{ switch(CurrentValue.charAt(i))
		{case "0": k = 0; break;
		case "1": k = 1;break;
		case "2": k = 2;break;
		case "3": k = 3;break;
		case "4": k = 4;break;
     		case "5": k = 5;break;
		case "6": k = 6;break;
		case "7": k = 7;break;
		case "8": k = 8;break;
  		case "9": k = 9;break;
		case "A": k = 10;break;
		case "B": k = 11;break;
		case "C": k = 12;break;
     		case "D": k = 13;break;
		case "E": k = 14;break;
		case "F": k = 15;break;
		default:  alert ("You must enter an unsigned hexadecimal integer number!");}
		        Result += k * Math.pow(16, inputlength-i-1);}
			document.getElementById("res").innerHTML = "Decimal";reset(Result);}
	

	if(Caption=='d2h' )
		{var y = 32;  ///number of bits
		if (CurrentValue == "") {alert ("You must enter an integer decimal number!");return false;}
		if(document.calculator.binsign[1].checked!=true)//unsigned
	    	{if (CurrentValue.charAt(0) == "-") {alert ("You must enter an unsigned integer decimal number!");return false;}}

	CurrentValue = parseInt(CurrentValue);
	var yourNumber = CurrentValue.toString(10);
	if(isNaN(yourNumber)){ alert("The inserted number is not a valid signed integer number. \n Please try another number.");}
	var bin = CurrentValue.toString(2);
	var newbin; //used for negative numbers to hold the first zeros and first 1 from the left
	var i = 0; 
	var j = 0;
	var digit = 0; 
	var temp = 0; 
	var decm = 0; 
	var inputlength = bin.length;
	if(document.calculator.binsign[1].checked!=true)//unsigned
        {Result = CurrentValue.toString(16).toUpperCase();  reset(Result); document.getElementById("res").innerHTML = "Hex"}
	else{
		if (inputlength > y) //
	   ///// covers the lowest negative number, e.g. -4 on 3 bits. 
 	  {if ((inputlength - 1 <= y)  && (bin.charAt(0) == "-") && (bin.charAt(1) == 1))
   	    { for (i=(inputlength-1);i>=2;i--)
              {	if (bin.charAt(i) == 1)  {temp = 1}};
      	 if (temp == 0)
	        {bin = bin.slice(1)
                 for(i = bin.length-1; i >= 0; i -= 1) 
		{ decm += eval(bin.charAt(i)) * Math.pow(2, bin.length-i-1);}
            	Result = decm.toString(16).toUpperCase(); reset(Result);   document.getElementById("res").innerHTML = "Hex";}
	 else {alert ("Overflow - not enough binary digits to display the number" + CurrentValue);}}
    	 else {alert ("Overflow - not enough binary digits to display the number " + CurrentValue);}
    	}
   	 else if ((inputlength == y) && (bin.charAt(0) == 1))
             {alert ("Overflow - not enough binary digits to display the number " + x);}
		else if ((inputlength < y) && (bin.charAt(0) != "-"))
                          {for (i=0;i<(y-inputlength);i++) 
				{bin = "0" + bin;}  //adds 0's for positive numbers
		 for(i = bin.length-1; i >= 0; i -= 1) 
		{ decm += eval(bin.charAt(i)) * Math.pow(2, bin.length-i-1);}
            	Result = decm.toString(16).toUpperCase(); reset(Result);  document.getElementById("res").innerHTML = "Hex";};

		if ((inputlength <= y) && (bin.charAt(0) == "-"))
                          {bin = bin.slice(1);  //slice the "-" from the neg number
			   while (digit == 0) //counts the # of 0's until the first "1",starting with LSB
				{digit = bin.charAt((inputlength-2-i));	i++;};
			   newbin = bin.slice(inputlength-1-i);	//storage for the LSB's: 10...0		
			     for (j=(inputlength-2-i);j>=0;j--)  //flips all other 1's and 0's
				{ if (bin.charAt(j) == "0")
					{newbin = "1" + newbin;}
				 else  {newbin = "0" + newbin;}}

			      for (i=0;i<(y-inputlength+1);i++) {newbin = "1" + newbin; }; //adds 1's for negative numbers 
			   bin =newbin;
			   for(i = bin.length-1; i >= 0; i -= 1) 
		{ decm += eval(bin.charAt(i)) * Math.pow(2, bin.length-i-1);}
            	Result = decm.toString(16).toUpperCase();reset(Result);   document.getElementById("res").innerHTML = "Hex";};
	}}

	if(Caption=='d2b' )
	{var y = 24;  ///number of bits
	if (CurrentValue == "") {alert ("You must enter an integer decimal number!");return false;}
	if(document.calculator.binsign[1].checked!=true)//unsigned
	    {if (CurrentValue.charAt(0) == "-") {alert ("You must enter an unsigned integer decimal number!");return false;}}

	CurrentValue = parseInt(CurrentValue);
	var yourNumber = CurrentValue.toString(10);
	if(isNaN(yourNumber)){alert("The inserted number is not a valid signed integer number. \n Please try another number.");}
			
	var bin = CurrentValue.toString(2);
	var newbin; //used for negative numbers to hold the first zeros and first 1 from the left
	var i = 0; 
	var j = 0;
	var digit = 0; 
	var temp = 0; 
	var inputlength = bin.length;
	if(document.calculator.binsign[1].checked!=true)//unsigned
   	    {Result = bin;  reset(Result);  document.getElementById("res").innerHTML = "Binary"}
	else{if (inputlength > y) //

	   ///// covers the lowest negative number, e.g. -4 on 3 bits. 
	   {if ((inputlength - 1 <= y)  && (bin.charAt(0) == "-") && (bin.charAt(1) == 1))
 	      { for (i=(inputlength-1);i>=2;i--)
              {	if (bin.charAt(i) == 1)  {temp = 1}};
   	    if (temp == 0)
	        {Result = bin.slice(1);	 reset(Result);	document.getElementById("res").innerHTML = "Binary";}
		else {alert ("Overflow - not enough binary digits to display the number" + CurrentValue);}
            }
     	    else {alert ("Overflow - not enough binary digits to display the number " + CurrentValue);}
   	   }
   	 else if ((inputlength == y) && (bin.charAt(0) == 1))
             {alert ("Overflow - not enough binary digits to display the number " + CurrentValue);}


		else if ((inputlength < y) && (bin.charAt(0) != "-"))
                          {for (i=0;i<(y-inputlength);i++) 
				{bin = "0" + bin; }; //adds 0's for positive numbers
				 Result = bin; reset(Result); document.getElementById("res").innerHTML = "Binary";};

		if ((inputlength <= y) && (bin.charAt(0) == "-"))
                          {bin = bin.slice(1);  //slice the "-" from the neg number
			   while (digit == 0) //counts the # of 0's until the first "1",starting with LSB
				{digit = bin.charAt((inputlength-2-i));	i++;};
			   newbin = bin.slice(inputlength-1-i);	//storage for the LSB's: 10...0		
			   for (j=(inputlength-2-i);j>=0;j--)  //flips all other 1's and 0's
				{ if (bin.charAt(j) == "0")
					{newbin = "1" + newbin;}
				  else  {newbin = "0" + newbin;}
				}
			   for (i=0;i<(y-inputlength+1);i++) {newbin = "1" + newbin; }; //adds 1's for negative numbers 
			   Result =newbin;    reset(Result);   document.getElementById("res").innerHTML = "Binary";};
	}}
}
</SCRIPT><SCRIPT LANGUAGE="JavaScript">
var Result=0, Operator=0, Second=0, Ready=0, Done=1, Complete=0, Integer, CurrentValue;

function reset(value)
{	document.calculator.LED.value = value;
	Result = 0, Operator = 0, Second = 0, Ready = 0; Done = 1; Complete = 0;}

function SetValue(NewValue)
{	Integer = 1;
	if(Second || Done)
	{	Second = 0;
		Done = 0;
		CurrentValue = NewValue;}
	for(var i=0; i<CurrentValue.length; i++)
		if (CurrentValue[i]=='.')
			Integer=0;
}

function Click(Caption)
{
	CurrentValue = document.calculator.LED.value;
	if(Caption=='.')
	{	SetValue('0');
		if(Integer)
		{	CurrentValue += Caption;
			document.calculator.LED.value = CurrentValue;
			Complete = 0;}
	}

	if (Caption.length == 1 && Caption>='0' && Caption<='9')
	{	SetValue('');
		CurrentValue += Caption;
		document.calculator.LED.value = CurrentValue;
		Complete = 1;
	document.getElementById("res").innerHTML = "";	}

	if (Caption.length == 1 && Caption>='A' && Caption<='F')
	{	SetValue('');
		if(CurrentValue=='0')
			CurrentValue='';
		CurrentValue += Caption;
		document.calculator.LED.value = CurrentValue;
		Complete = 1;
		document.getElementById("res").innerHTML = "";}

	
	

	if(Caption=='plusminus')
		document.calculator.LED.value = eval(-CurrentValue);
	if(Caption=='=' && Complete && Operator!='0')
	{	if (Operator=='^')
		{Result = Math.pow(Result, CurrentValue); reset(Result);
		} else
			reset(eval(Result + Operator + CurrentValue));}

	if (Caption=='CL')
	{	reset(0);
                document.getElementById("res").innerHTML = "";
	if(document.calculator.LED.value[0] == '.')
		document.calculator.LED.value = '0' + document.calculator.LED.value;}

	if (Caption=='signedradio')
	{reset(0);  document.calculator.h2d.disabled = true;
	document.calculator.plusminus.disabled = false;
	if(document.calculator.LED.value[0] == '.')
		document.calculator.LED.value = '0' + document.calculator.LED.value;}

	if (Caption=='unsignedradio')
	{reset(0);	document.calculator.h2d.disabled = false;
	document.calculator.plusminus.disabled = true;
	if(document.calculator.LED.value[0] == '.')
		document.calculator.LED.value = '0' + document.calculator.LED.value;}


	if(Caption=='b2d' )
	{if (CurrentValue == "") {alert ("You must enter a binary integer number!");return false;}
	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1") {
			alert("The inserted number is not a valid signed binary number. \n All digits must be a binary 0 or a 1."); 
			return false;}
	}
	var i = 0; 
	var inputlength = CurrentValue.length;
	for(i = inputlength-1; i >= 1; i -= 1) 
	{ Result += eval(CurrentValue.charAt(i)) * Math.pow(2, inputlength-i-1);};//add all bits except sign
	if(document.calculator.binsign[1].checked == true)
           {Result = Result - eval(CurrentValue.charAt(0)) * Math.pow(2, inputlength-1);}
	else       {Result = Result + eval(CurrentValue.charAt(0)) * Math.pow(2, inputlength-1);};
  	  reset(Result);document.getElementById("res").innerHTML = "Decimal";}


	if(Caption=='2s')
	{if (CurrentValue == "") {alert ("You must enter a binary number!");return false;}
	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1") {
			alert("The inserted number is not a valid signed binary number. \n All digits must be a binary 0 or a 1."); 
			return false;}}
	var bin = CurrentValue.toString(2);
	var newbin; //used to hold the first zeros and first 1 from the left
	var i = 0; 
	var j = 0;
	var digit = 0;
	var temp = 0; 
	var inputlength = CurrentValue.length;
   	   for (i=(inputlength-1);i>=0;i--)
                {if (bin.charAt(i) != 0) {temp = 1};};

	if (temp == 0)
	    {Result = CurrentValue;}
        else    {   while (digit == 0) //counts the # of 0's until the first "1",starting with LSB
				{digit = bin.charAt((inputlength-1-i));	i++;};
			   newbin = bin.slice(inputlength-i);	//storage for the LSB's: 10...0					   
			   for (j=(inputlength-i-1);j>=0;j--)  //flips all other 1's and 0's
				{ if (bin.charAt(j) == "0")
					{newbin = "1" + newbin;}
				  else  {newbin = "0" + newbin;	}
				};    
			   bin =newbin; Result = newbin;}
		reset(Result);}




  	if(Caption=='h2b' )
	{CurrentValue = CurrentValue.toUpperCase();
		if (CurrentValue == "") {alert ("You must enter a signed hexadecimal integer number!");return false;}
	var i = 0;
	var k = 0;
	var decm = 0;  
	var inputlength = CurrentValue.length;
	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1" && CurrentValue.charAt(z) != "2" && CurrentValue.charAt(z) != "3" && CurrentValue.charAt(z) != "4" && CurrentValue.charAt(z) != "5" && CurrentValue.charAt(z) != "6" && CurrentValue.charAt(z) != "7" && CurrentValue.charAt(z) != "8" && CurrentValue.charAt(z) != "9" && CurrentValue.charAt(z) != "A" && CurrentValue.charAt(z) != "B" && CurrentValue.charAt(z) != "C" && CurrentValue.charAt(z) != "D" && CurrentValue.charAt(z) != "E" && CurrentValue.charAt(z) != "F") {
			alert("The inserted number is not a valid signed hexadecimal number.\n Use A-F capital letters and numbers."); 			return false;}
	}
	for(i = inputlength-1; i >= 0; i -= 1)
	{ switch(CurrentValue.charAt(i))
		{case "0": k = 0; break;
		case "1": k = 1;break;
		case "2": k = 2;break;
		case "3": k = 3;break;
		case "4": k = 4;break;
     		case "5": k = 5;break;
		case "6": k = 6;break;
		case "7": k = 7;break;
		case "8": k = 8;break;
  		case "9": k = 9;break;
		case "A": k = 10;break;
		case "B": k = 11;break;
		case "C": k = 12;break;
     		case "D": k = 13;break;
		case "E": k = 14;break;
		case "F": k = 15;break;
		default:  alert ("You must enter a signed hexadecimal integer number!");}
        decm += k * Math.pow(16, inputlength-i-1);};
	Result = decm.toString(2);reset(Result);document.getElementById("res").innerHTML = "Binary";}



	if(Caption=='b2h' )
	{if (CurrentValue == "") {alert ("You must enter a signed binary integer number!");return false;}

	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1") {
			alert("The inserted number is not a valid signed binary number. \n All digits must be a binary 0 or a 1.");return false;}
	}
	var i = 0;  
	var decm = 0; 
	var inputlength = CurrentValue.length;
	for(i = inputlength-1; i >= 0; i -= 1) 
	{ decm += eval(CurrentValue.charAt(i)) * Math.pow(2, inputlength-i-1);}
	//decm is the decimal value
	Result = decm.toString(16).toUpperCase();document.getElementById("res").innerHTML = "HEX";reset(Result);}


	if(Caption=='h2d' )
	{CurrentValue = CurrentValue.toUpperCase();
		///////check for no input
	if (CurrentValue == "") {alert ("You must enter an unsigned hexadecimal integer number!");return false;}
	var i = 0;
	var k = 0;  
	var inputlength = CurrentValue.length;
	/////check for a binary
	for (z=0; z <= CurrentValue.length-1; z++) { //ensure input contains only 1s and 0s
		if(CurrentValue.charAt(z) != "0" && CurrentValue.charAt(z) != "1" && CurrentValue.charAt(z) != "2" && CurrentValue.charAt(z) != "3" && CurrentValue.charAt(z) != "4" && CurrentValue.charAt(z) != "5" && CurrentValue.charAt(z) != "6" && CurrentValue.charAt(z) != "7" && CurrentValue.charAt(z) != "8" && CurrentValue.charAt(z) != "9" && CurrentValue.charAt(z) != "A" && CurrentValue.charAt(z) != "B" && CurrentValue.charAt(z) != "C" && CurrentValue.charAt(z) != "D" && CurrentValue.charAt(z) != "E" && CurrentValue.charAt(z) != "F") {			alert("The inserted number is not a valid unsigned hexadecimal number.\n Use A-F capital letters and numbers."); return false;}
	}
	for(i = inputlength-1; i >= 0; i -= 1)
		{ switch(CurrentValue.charAt(i))
		{case "0": k = 0; break;
		case "1": k = 1;break;
		case "2": k = 2;break;
		case "3": k = 3;break;
		case "4": k = 4;break;
     		case "5": k = 5;break;
		case "6": k = 6;break;
		case "7": k = 7;break;
		case "8": k = 8;break;
  		case "9": k = 9;break;
		case "A": k = 10;break;
		case "B": k = 11;break;
		case "C": k = 12;break;
     		case "D": k = 13;break;
		case "E": k = 14;break;
		case "F": k = 15;break;
		default:  alert ("You must enter an unsigned hexadecimal integer number!");}
		        Result += k * Math.pow(16, inputlength-i-1);}
			document.getElementById("res").innerHTML = "Decimal";reset(Result);}
	

	if(Caption=='d2h' )
		{var y = 32;  ///number of bits
		if (CurrentValue == "") {alert ("You must enter an integer decimal number!");return false;}
		if(document.calculator.binsign[1].checked!=true)//unsigned
	    	{if (CurrentValue.charAt(0) == "-") {alert ("You must enter an unsigned integer decimal number!");return false;}}

	CurrentValue = parseInt(CurrentValue);
	var yourNumber = CurrentValue.toString(10);
	if(isNaN(yourNumber)){ alert("The inserted number is not a valid signed integer number. \n Please try another number.");}
	var bin = CurrentValue.toString(2);
	var newbin; //used for negative numbers to hold the first zeros and first 1 from the left
	var i = 0; 
	var j = 0;
	var digit = 0; 
	var temp = 0; 
	var decm = 0; 
	var inputlength = bin.length;
	if(document.calculator.binsign[1].checked!=true)//unsigned
        {Result = CurrentValue.toString(16).toUpperCase();  reset(Result); document.getElementById("res").innerHTML = "Hex"}
	else{
		if (inputlength > y) //
	   ///// covers the lowest negative number, e.g. -4 on 3 bits. 
 	  {if ((inputlength - 1 <= y)  && (bin.charAt(0) == "-") && (bin.charAt(1) == 1))
   	    { for (i=(inputlength-1);i>=2;i--)
              {	if (bin.charAt(i) == 1)  {temp = 1}};
      	 if (temp == 0)
	        {bin = bin.slice(1)
                 for(i = bin.length-1; i >= 0; i -= 1) 
		{ decm += eval(bin.charAt(i)) * Math.pow(2, bin.length-i-1);}
            	Result = decm.toString(16).toUpperCase(); reset(Result);   document.getElementById("res").innerHTML = "Hex";}
	 else {alert ("Overflow - not enough binary digits to display the number" + CurrentValue);}}
    	 else {alert ("Overflow - not enough binary digits to display the number " + CurrentValue);}
    	}
   	 else if ((inputlength == y) && (bin.charAt(0) == 1))
             {alert ("Overflow - not enough binary digits to display the number " + x);}
		else if ((inputlength < y) && (bin.charAt(0) != "-"))
                          {for (i=0;i<(y-inputlength);i++) 
				{bin = "0" + bin;}  //adds 0's for positive numbers
		 for(i = bin.length-1; i >= 0; i -= 1) 
		{ decm += eval(bin.charAt(i)) * Math.pow(2, bin.length-i-1);}
            	Result = decm.toString(16).toUpperCase(); reset(Result);  document.getElementById("res").innerHTML = "Hex";};

		if ((inputlength <= y) && (bin.charAt(0) == "-"))
                          {bin = bin.slice(1);  //slice the "-" from the neg number
			   while (digit == 0) //counts the # of 0's until the first "1",starting with LSB
				{digit = bin.charAt((inputlength-2-i));	i++;};
			   newbin = bin.slice(inputlength-1-i);	//storage for the LSB's: 10...0		
			     for (j=(inputlength-2-i);j>=0;j--)  //flips all other 1's and 0's
				{ if (bin.charAt(j) == "0")
					{newbin = "1" + newbin;}
				 else  {newbin = "0" + newbin;}}

			      for (i=0;i<(y-inputlength+1);i++) {newbin = "1" + newbin; }; //adds 1's for negative numbers 
			   bin =newbin;
			   for(i = bin.length-1; i >= 0; i -= 1) 
		{ decm += eval(bin.charAt(i)) * Math.pow(2, bin.length-i-1);}
            	Result = decm.toString(16).toUpperCase();reset(Result);   document.getElementById("res").innerHTML = "Hex";};
	}}

	if(Caption=='d2b' )
	{var y = 24;  ///number of bits
	if (CurrentValue == "") {alert ("You must enter an integer decimal number!");return false;}
	if(document.calculator.binsign[1].checked!=true)//unsigned
	    {if (CurrentValue.charAt(0) == "-") {alert ("You must enter an unsigned integer decimal number!");return false;}}

	CurrentValue = parseInt(CurrentValue);
	var yourNumber = CurrentValue.toString(10);
	if(isNaN(yourNumber)){alert("The inserted number is not a valid signed integer number. \n Please try another number.");}
			
	var bin = CurrentValue.toString(2);
	var newbin; //used for negative numbers to hold the first zeros and first 1 from the left
	var i = 0; 
	var j = 0;
	var digit = 0; 
	var temp = 0; 
	var inputlength = bin.length;
	if(document.calculator.binsign[1].checked!=true)//unsigned
   	    {Result = bin;  reset(Result);  document.getElementById("res").innerHTML = "Binary"}
	else{if (inputlength > y) //

	   ///// covers the lowest negative number, e.g. -4 on 3 bits. 
	   {if ((inputlength - 1 <= y)  && (bin.charAt(0) == "-") && (bin.charAt(1) == 1))
 	      { for (i=(inputlength-1);i>=2;i--)
              {	if (bin.charAt(i) == 1)  {temp = 1}};
   	    if (temp == 0)
	        {Result = bin.slice(1);	 reset(Result);	document.getElementById("res").innerHTML = "Binary";}
		else {alert ("Overflow - not enough binary digits to display the number" + CurrentValue);}
            }
     	    else {alert ("Overflow - not enough binary digits to display the number " + CurrentValue);}
   	   }
   	 else if ((inputlength == y) && (bin.charAt(0) == 1))
             {alert ("Overflow - not enough binary digits to display the number " + CurrentValue);}


		else if ((inputlength < y) && (bin.charAt(0) != "-"))
                          {for (i=0;i<(y-inputlength);i++) 
				{bin = "0" + bin; }; //adds 0's for positive numbers
				 Result = bin; reset(Result); document.getElementById("res").innerHTML = "Binary";};

		if ((inputlength <= y) && (bin.charAt(0) == "-"))
                          {bin = bin.slice(1);  //slice the "-" from the neg number
			   while (digit == 0) //counts the # of 0's until the first "1",starting with LSB
				{digit = bin.charAt((inputlength-2-i));	i++;};
			   newbin = bin.slice(inputlength-1-i);	//storage for the LSB's: 10...0		
			   for (j=(inputlength-2-i);j>=0;j--)  //flips all other 1's and 0's
				{ if (bin.charAt(j) == "0")
					{newbin = "1" + newbin;}
				  else  {newbin = "0" + newbin;}
				}
			   for (i=0;i<(y-inputlength+1);i++) {newbin = "1" + newbin; }; //adds 1's for negative numbers 
			   Result =newbin;    reset(Result);   document.getElementById("res").innerHTML = "Binary";};
	}}
}
</SCRIPT>
